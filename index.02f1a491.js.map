{"mappings":"ACEA,IAAM,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAQ,SAAS,aAAa,CAAC,SAYrC,AAViB,IAAI,iBAAiB,WACpC,EAAU,QAAQ,CAAG,EAAM,IAAI,CAAC,MAAM,EAAI,GAC1C,EAAU,QAAQ,CAAG,EAAM,IAAI,CAAC,MAAM,EAAI,EAErC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAyB,CAAzB,IAAM,EAAN,EAAA,KAAA,AACH,CAAA,EAAa,QAAQ,CAAG,EAAI,KAAK,CAAC,MAAM,EAAI,GAC5C,EAAa,QAAQ,CAAG,EAAI,KAAK,CAAC,MAAM,EAAI,CAC9C,C,C,M,E,CAHK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIP,GAES,OAAO,CAAC,EAAO,CACtB,UAAW,CAAA,EACX,QAAS,CAAA,CACX,GAEA,EAAU,gBAAgB,CAAC,QAAS,WAClC,IAAM,EAAM,EAAM,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,EAEhC,CAAA,EAAM,IAAI,CAAC,MAAM,CAAG,IACtB,EAAM,SAAS,CAAC,WAAW,CAAC,EAEhC,GAEA,EAAU,gBAAgB,CAAC,QAAS,WAClC,EAAM,SAAS,CAAC,gBAAgB,CAAC,MAAM,EACzC,GAEA,EAAa,gBAAgB,CAAC,QAAS,WAChC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAyB,CAAzB,IAAM,EAAN,EAAA,KAAA,CACG,EAAO,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,EAE/B,CAAA,EAAI,KAAK,CAAC,MAAM,CAAG,IACrB,EAAI,MAAM,CAAC,EAEf,C,C,M,E,CANK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOP,GAEA,EAAa,gBAAgB,CAAC,QAAS,WAChC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,gBAAgB,CAAC,MAAM,E,C,M,E,CADxB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGP","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar appendRow = document.querySelector(\".append-row\");\nvar removeRow = document.querySelector(\".remove-row\");\nvar appendColumn = document.querySelector(\".append-column\");\nvar removeColumn = document.querySelector(\".remove-column\");\nvar table = document.querySelector(\"table\");\nvar observer = new MutationObserver(function() {\n    appendRow.disabled = table.rows.length >= 10;\n    removeRow.disabled = table.rows.length <= 2;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            appendColumn.disabled = row.cells.length >= 10;\n            removeColumn.disabled = row.cells.length <= 2;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n});\nobserver.observe(table, {\n    childList: true,\n    subtree: true\n});\nappendRow.addEventListener(\"click\", function() {\n    var row = table.rows[0].cloneNode(true);\n    if (table.rows.length < 10) table.lastChild.appendChild(row);\n});\nremoveRow.addEventListener(\"click\", function() {\n    table.lastChild.lastElementChild.remove();\n});\nappendColumn.addEventListener(\"click\", function() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var cell = row.cells[0].cloneNode();\n            if (row.cells.length < 10) row.append(cell);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n});\nremoveColumn.addEventListener(\"click\", function() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.lastElementChild.remove();\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n});\n\n//# sourceMappingURL=index.02f1a491.js.map\n","'use strict';\n\nconst appendRow = document.querySelector('.append-row');\nconst removeRow = document.querySelector('.remove-row');\nconst appendColumn = document.querySelector('.append-column');\nconst removeColumn = document.querySelector('.remove-column');\nconst table = document.querySelector('table');\n\nconst observer = new MutationObserver(() => {\n  appendRow.disabled = table.rows.length >= 10;\n  removeRow.disabled = table.rows.length <= 2;\n\n  for (const row of table.rows) {\n    appendColumn.disabled = row.cells.length >= 10;\n    removeColumn.disabled = row.cells.length <= 2;\n  }\n});\n\nobserver.observe(table, {\n  childList: true,\n  subtree: true,\n});\n\nappendRow.addEventListener('click', () => {\n  const row = table.rows[0].cloneNode(true);\n\n  if (table.rows.length < 10) {\n    table.lastChild.appendChild(row);\n  }\n});\n\nremoveRow.addEventListener('click', () => {\n  table.lastChild.lastElementChild.remove();\n});\n\nappendColumn.addEventListener('click', () => {\n  for (const row of table.rows) {\n    const cell = row.cells[0].cloneNode();\n\n    if (row.cells.length < 10) {\n      row.append(cell);\n    }\n  }\n});\n\nremoveColumn.addEventListener('click', () => {\n  for (const row of table.rows) {\n    row.lastElementChild.remove();\n  }\n});\n"],"names":["appendRow","document","querySelector","removeRow","appendColumn","removeColumn","table","observer","MutationObserver","disabled","rows","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","cells","err","return","observe","childList","subtree","addEventListener","cloneNode","lastChild","appendChild","lastElementChild","remove","cell","append"],"version":3,"file":"index.02f1a491.js.map"}